# 지식 공유 위키 프로토타입 PRD (Product Requirements Document)

## 프로젝트 개요
- **프로젝트명**: 지식 공유 위키
- **목적**: 사내 노하우 및 지식을 체계적으로 저장하고 검색할 수 있는 프로토타입 개발
- **개발 기간**: 2주
- **개발 도구**: Cursor AI, Taskmaster AI

## 핵심 기능 요구사항

### 1. 기본 기능 (Must Have)
- **문서 작성**: 마크다운 에디터로 글 작성 및 편집
- **문서 조회**: 작성된 문서 목록 보기 및 개별 문서 읽기
- **검색 기능**: 제목, 내용, 태그 기반 실시간 검색
- **카테고리 분류**: 문서를 카테고리별로 분류 및 필터링
- **태그 시스템**: 문서에 다중 태그 추가 및 태그별 필터링

### 2. 부가 기능 (Nice to Have)
- **즐겨찾기**: 자주 보는 문서 북마크
- **최근 문서**: 최근에 작성/수정된 문서 목록
- **문서 통계**: 총 문서 수, 카테고리별 문서 수

## 기술 요구사항

### Frontend
- **프레임워크**: React 18 + Next.js 15
- **스타일링**: shadcn/ui (Tailwind CSS)
- **마크다운**: React-Markdown
- **에디터**: React-SimpleMDE-Editor
- **검색**: Fuse.js (퍼지 검색)

### Backend
- **런타임**: Node.js 18+
- **프레임워크**: Express.js
- **데이터베이스**: MySQL
- **API**: RESTful API

### 개발 환경
- **패키지 매니저**: pnpm
- **번들러**: Next.js (내장 Webpack)
- **개발 서버**: Express + Next.js Dev Server

## 데이터 모델

### Articles 테이블
```sql
CREATE TABLE articles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    category TEXT,
    tags TEXT, -- JSON 형태로 저장
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

### Categories 테이블
```sql
CREATE TABLE categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL,
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

## API 엔드포인트

### 문서 관련
- `GET /api/articles` - 모든 문서 목록 조회
- `GET /api/articles/:id` - 특정 문서 조회
- `POST /api/articles` - 새 문서 작성
- `PUT /api/articles/:id` - 문서 수정
- `DELETE /api/articles/:id` - 문서 삭제

### 검색 관련
- `GET /api/search?q={query}` - 문서 검색
- `GET /api/articles/category/:category` - 카테고리별 문서 조회
- `GET /api/articles/tag/:tag` - 태그별 문서 조회

### 메타데이터
- `GET /api/categories` - 모든 카테고리 목록
- `GET /api/tags` - 모든 태그 목록
- `GET /api/stats` - 기본 통계 정보

## UI/UX 요구사항

### 레이아웃
- **헤더**: 로고, 검색바, 새 글쓰기 버튼
- **사이드바**: 카테고리 필터, 태그 클라우드, 최근 문서
- **메인 영역**: 문서 목록 또는 문서 내용
- **반응형**: 모바일 대응

### 페이지 구성
1. **홈페이지**: 최근 문서, 인기 카테고리, 검색 기능
2. **문서 목록**: 필터링, 정렬, 페이지네이션
3. **문서 상세**: 마크다운 렌더링, 편집 버튼, 메타데이터
4. **문서 편집**: 마크다운 에디터, 실시간 프리뷰
5. **검색 결과**: 하이라이팅, 관련도순 정렬

## 개발 우선순위

### Week 1 (1-7일)
1. **프로젝트 셋업** (1일)
   - React + Next.js 프로젝트 생성
   - Express 서버 설정
   - MySQL 데이터베이스 연결

2. **기본 CRUD** (3일)
   - 문서 작성/조회/수정/삭제 API
   - 기본 React 컴포넌트 구성
   - 마크다운 에디터 통합

3. **UI 기본 구조** (3일)
   - 레이아웃 컴포넌트
   - 문서 목록 페이지
   - 문서 상세 페이지

### Week 2 (8-14일)
1. **검색 기능** (3일)
   - 검색 API 구현
   - 프론트엔드 검색 UI
   - 검색 결과 하이라이팅

2. **카테고리/태그** (3일)
   - 카테고리 관리 기능
   - 태그 시스템 구현
   - 필터링 UI

3. **마무리** (1일)
   - 버그 수정
   - UI 개선
   - 기본 스타일링

## 성공 기준
- 문서 작성/편집/삭제가 정상 동작
- 검색 기능이 제목, 내용, 태그에서 작동
- 카테고리별 분류 및 필터링 가능
- 반응형 UI로 모바일에서도 사용 가능
- MySQL 데이터베이스에 데이터 영구 저장

## 제약사항
- 사용자 인증 기능 없음 (단순 프로토타입)
- 파일 업로드 기능 없음
- 실시간 협업 기능 없음
- 권한 관리 기능 없음

## 폴더 구조
```
DocHub/
├── package.json
├── pnpm-workspace.yaml
├── .github/
│   └── workflows/
│       └── deploy.yml
├── apps/
│   ├── frontend/                    # Next.js 프론트엔드
│   │   ├── package.json
│   │   ├── next.config.ts
│   │   ├── tailwind.config.js
│   │   ├── src/
│   │   │   ├── app/                 # Next.js App Router
│   │   │   │   ├── layout.tsx
│   │   │   │   ├── page.tsx
│   │   │   │   └── globals.css
│   │   │   ├── components/
│   │   │   │   ├── ui/              # shadcn/ui 컴포넌트
│   │   │   │   ├── ArticleList.jsx
│   │   │   │   ├── ArticleEditor.jsx
│   │   │   │   ├── ArticleViewer.jsx
│   │   │   │   └── CategoryManager.jsx
│   │   │   ├── pages/
│   │   │   │   └── MainPage.jsx
│   │   │   ├── utils/
│   │   │   │   └── api.js
│   │   │   └── config/
│   │   │       └── api.js
│   │   └── public/
│   └── backend/                     # Express.js 백엔드
│       ├── package.json
│       ├── app.js
│       ├── routes/
│       │   ├── articles.js
│       │   ├── categories.js
│       │   └── search.js
│       ├── models/
│       │   ├── Article.js
│       │   └── Category.js
│       ├── config/
│       │   └── database.js
│       └── middleware/
├── scripts/
│   ├── prd.txt
│   └── example_prd.txt
└── tasks/
    └── tasks.json
```